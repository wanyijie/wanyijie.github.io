<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>监控 on hope to be a great computer technology Site</title>
    <link>https://wangyijie.store/posts/monitor/</link>
    <description>Recent content in 监控 on hope to be a great computer technology Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://wangyijie.store/posts/monitor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://wangyijie.store/posts/monitor/inotifywait%E5%91%BD%E4%BB%A4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangyijie.store/posts/monitor/inotifywait%E5%91%BD%E4%BB%A4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/</guid>
      <description>inotify可以对linux 文件系统进行高效性、细粒度、异步的监控，用于通知用户控件程序的文件系统变化。inotify可以监控文件，也可以监控目录，配合rsync实现文件的实时同步功能。
　首先安装inotify软件，先检查自己的系统版本（uname -r），我的是centos 7的系统，我的步骤是
　1、首先检查自己的电脑是否已经安装了这个软件。 rpm -qa inotify-tools
　2、检查仓库中是否有这个软件。 yum search inotify-tools
　3、发现这个软件不在yum仓库中，安装对应的epel源。
　wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo
　yum clean all
　yum makecache
　4、安装inotify-tools软件
　yum install inotify-tools -y
　5、查看inotifywait的简单用法
[root@nfs01 data]# inotifywait -mrq -e &amp;lsquo;create,delete,close_write,attrib,moved_to&amp;rsquo; &amp;ndash;timefmt &amp;lsquo;%Y-%m-%d %H:%M&amp;rsquo; &amp;ndash;format &amp;lsquo;%T %w%f %e&amp;rsquo; /backup/ 2019-06-04 10:46 /backup/test.txt CREATE 2019-06-04 10:46 /backup/test.txt ATTRIB 2019-06-04 10:46 /backup/test.txt CLOSE_WRITE,CLOSE 2019-06-04 10:47 /backup/test.txt CLOSE_WRITE,CLOSE 2019-06-04 10:47 /backup/isr DELETE 2019-06-04 10:47 /backup/me MOVED_TO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangyijie.store/posts/monitor/p50p90-%E5%92%8C-p99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangyijie.store/posts/monitor/p50p90-%E5%92%8C-p99/</guid>
      <description>监控指标种常以最大值，最小值，平均数来衡量，另外还有一种简单的分布表示， 如：每秒总请求数、错误率以及请求延迟等可以使用分布临界值做为参考。 P50表示中位数。 P75表示包含百分之七十五的值值。 P90表示包含90%的值。 P99表示包含99%的值。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangyijie.store/posts/monitor/use%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangyijie.store/posts/monitor/use%E6%96%B9%E6%B3%95/</guid>
      <description>USE方法全称&amp;quot;Utilization Saturation and Errors Method&amp;quot;，主要用于分析系统性能问题，可以指导用户快速识别资源瓶颈以及错误的方法。正如USE方法的名字所表示的含义，USE方法主要关注与资源的：使用率(Utilization)、饱和度(Saturation)以及错误(Errors)。
  使用率：关注系统资源的使用情况。 这里的资源主要包括但不限于：CPU，内存，网络，磁盘等等。100%的使用率通常是系统性能瓶颈的标志。
  饱和度：例如CPU的平均运行排队长度，这里主要是针对资源的饱和度(注意，不同于4大黄金信号)。任何资源在某种程度上的饱和都可能导致系统性能的下降。
  错误：错误计数。例如：“网卡在数据包传输过程中检测到的以太网网络冲突了14次”。
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangyijie.store/posts/monitor/%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A74%E4%B8%AA%E9%BB%84%E9%87%91%E6%8C%87%E6%A0%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangyijie.store/posts/monitor/%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A74%E4%B8%AA%E9%BB%84%E9%87%91%E6%8C%87%E6%A0%87/</guid>
      <description>Four Golden Signals是Google针对大量分布式监控的经验总结，4个黄金指标可以在服务级别帮助衡量终端用户体验、服务中断、业务影响等层面的问题。主要关注与以下四种类型的指标：延迟，通讯量，错误以及饱和度：
 延迟：服务请求所需时间。  记录用户所有请求所需的时间，重点是要区分成功请求的延迟时间和失败请求的延迟时间。 例如在数据库或者其他关键祸端服务异常触发HTTP 500的情况下，用户也可能会很快得到请求失败的响应内容，如果不加区分计算这些请求的延迟，可能导致计算结果与实际结果产生巨大的差异。除此以外，在微服务中通常提倡“快速失败”，开发人员需要特别注意这些延迟较大的错误，因为这些缓慢的错误会明显影响系统的性能，因此追踪这些错误的延迟也是非常重要的。
 通讯量：监控当前系统的流量，用于衡量服务的容量需求。  流量对于不同类型的系统而言可能代表不同的含义。例如，在HTTP REST API中, 流量通常是每秒HTTP请求数；
 错误：监控当前系统所有发生的错误请求，衡量当前系统错误发生的速率。  对于失败而言有些是显式的(比如, HTTP 500错误)，而有些是隐式(比如，HTTP响应200，单实际业务流程依然是失败的)。
对于一些显式的错误如HTTP 500可以通过在负载均衡器(如Nginx)上进行捕获，而对于一些系统内部的异常，则可能需要直接从服务中添加钩子统计并进行获取。
 饱和度：衡量当前服务的饱和度。  主要强调最能影响服务状态的受限制的资源。 例如，如果系统主要受内存影响，那就主要关注系统的内存状态，如果系统主要受限与磁盘I/O，那就主要观测磁盘I/O的状态。因为通常情况下，当这些资源达到饱和后，服务的性能会明显下降。同时还可以利用饱和度对系统做出预测，比如，“磁盘是否可能在4个小时候就满了”。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangyijie.store/posts/monitor/%E7%9B%91%E6%8E%A7red%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangyijie.store/posts/monitor/%E7%9B%91%E6%8E%A7red%E6%96%B9%E6%B3%95/</guid>
      <description>RED方法是Weave Cloud在基于Google的“4个黄金指标”的原则下结合Prometheus以及Kubernetes容器实践，细化和总结的方法论，特别适合于云原生应用以及微服务架构应用的监控和度量。主要关注以下三种关键指标：
(请求)速率：服务每秒接收的请求数。
(请求)错误：每秒失败的请求数。
(请求)耗时：每个请求的耗时。
在“4大黄金信号”的原则下，RED方法可以有效的帮助用户衡量云原生以及微服务应用下的用户体验问题。</description>
    </item>
    
  </channel>
</rss>
